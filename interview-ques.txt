1) What do you like and dislike about React?
	• Love unidrectional
	• that React is pretty much JS
	• Disliked JSX
2)Conditional Rendering and List Rendering in React 
	• What is the significance of having the keyprop when rendering a list of elements
		A) It provides an easier way for the PC to identify the unique number (runner analogy)
	• How React compares elements under the hood to only render what has changed
	• What is a potential bug you can introduce when using index as key
3)Class component's lifecycle methods 
	• There will always be legacy code that you need to maintain
	• Learn the mounting phase, the updation phase and the
	unmounting phase methods
	• Order of invocation and a brief description of when you'd
	use each one of them

4) Context API
	• What is class drilling and how can you overcome that with the context API
5) Hooks 
	• Need for hooks
	• userState,useEffect, and useContext
	• How does useEffect compare to component did mount, did update, and will unmount lifecycle methods (4:00)
6)Optimization
	• Pure components
	• memo
	• useMemo and useCallback
7)How do you share logic across components?
	• Higher order components
	• Render props pattern
	• Custom hooks
8) What are some of the packages you used with react
	Styling
	• Routing
	• Form handling
	• State management
	• CRA vs Custom webpack config


----------------------

Redux:

What is Redux?
How do you decide whether to use contextApi or Redux?
What is the redux store?
What are actions?
What are action creators?
What are reducers?
How control flows between these parts?
What exactly does the connect function do from the react-redux library?
What do mapStateToProps and mapDispatchToProps actually do?
Why should you dispatch an action to update a state and not update the store directly.
In a reducer, why should you return a new object as state instead of modifying the existing state object?